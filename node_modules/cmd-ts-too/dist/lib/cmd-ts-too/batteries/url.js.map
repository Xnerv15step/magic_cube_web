{
  "version": 3,
  "sources": ["../../../../src/batteries/url.ts"],
  "sourcesContent": ["import { URL } from \"node:url\";\nimport { extendType, string } from \"..\";\n\n/**\n * Decodes a string into the `URL` type\n */\nexport const Url = extendType(string, {\n  displayName: \"url\",\n  description: \"A valid URL\",\n  async from(str): Promise<URL> {\n    const url = new URL(str);\n    if (!url.protocol || !url.host) {\n      throw new Error(\"Malformed URL\");\n    }\n\n    if (![\"http:\", \"https:\"].includes(url.protocol as string)) {\n      throw new Error(\"Only allowed http and https URLs\");\n    }\n\n    return url;\n  },\n});\n\n/**\n * Decodes an http/https only URL\n */\nexport const HttpUrl = extendType(Url, {\n  async from(url): Promise<URL> {\n    if (![\"http:\", \"https:\"].includes(url.protocol as string)) {\n      throw new Error(\"Only allowed http and https URLs\");\n    }\n\n    return url;\n  },\n});\n"],
  "mappings": ";;;;;;AAAA,SAAS,WAAW;AAMb,IAAM,MAAM,WAAW,QAAQ;AAAA,EACpC,aAAa;AAAA,EACb,aAAa;AAAA,EACb,MAAM,KAAK,KAAmB;AAC5B,UAAM,MAAM,IAAI,IAAI,GAAG;AACvB,QAAI,CAAC,IAAI,YAAY,CAAC,IAAI,MAAM;AAC9B,YAAM,IAAI,MAAM,eAAe;AAAA,IACjC;AAEA,QAAI,CAAC,CAAC,SAAS,QAAQ,EAAE,SAAS,IAAI,QAAkB,GAAG;AACzD,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACpD;AAEA,WAAO;AAAA,EACT;AACF,CAAC;AAKM,IAAM,UAAU,WAAW,KAAK;AAAA,EACrC,MAAM,KAAK,KAAmB;AAC5B,QAAI,CAAC,CAAC,SAAS,QAAQ,EAAE,SAAS,IAAI,QAAkB,GAAG;AACzD,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACpD;AAEA,WAAO;AAAA,EACT;AACF,CAAC;",
  "names": []
}
