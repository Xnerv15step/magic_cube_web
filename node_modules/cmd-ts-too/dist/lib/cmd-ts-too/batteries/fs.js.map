{
  "version": 3,
  "sources": ["../../../../src/batteries/fs.ts"],
  "sourcesContent": ["import fs from \"node:fs\";\nimport path from \"node:path\";\nimport { extendType, string } from \"..\";\n\n/**\n * Resolves an existing path. Produces an error when path does not exist.\n * When provided a relative path, extends it using the current working directory.\n */\nexport const ExistingPath = extendType(string, {\n  displayName: \"path\",\n  description: \"An existing path\",\n  async from(str) {\n    const resolved = path.resolve(str);\n\n    if (!fs.existsSync(resolved)) {\n      throw new Error(\"Path doesn't exist\");\n    }\n\n    return resolved;\n  },\n});\n\n/**\n * Resolves to a directory if given one, and to a file's directory if file was given.\n * Fails when the directory or the given file does not exist.\n */\nexport const Directory = extendType(ExistingPath, {\n  async from(resolved) {\n    const stat = fs.statSync(resolved);\n\n    if (stat.isDirectory()) {\n      return resolved;\n    }\n\n    return path.dirname(resolved);\n  },\n  displayName: \"dir\",\n  description: \"A path to a directory or a file within a directory\",\n});\n\n/**\n * Resolves to a path to an existing file\n */\nexport const File = extendType(ExistingPath, {\n  async from(resolved) {\n    const stat = fs.statSync(resolved);\n\n    if (stat.isFile()) {\n      return resolved;\n    }\n\n    throw new Error(\"Provided path is not a file\");\n  },\n  displayName: \"file\",\n  description: \"A file in the file system\",\n});\n"],
  "mappings": ";;;;;;AAAA,OAAO,QAAQ;AACf,OAAO,UAAU;AAOV,IAAM,eAAe,WAAW,QAAQ;AAAA,EAC7C,aAAa;AAAA,EACb,aAAa;AAAA,EACb,MAAM,KAAK,KAAK;AACd,UAAM,WAAW,KAAK,QAAQ,GAAG;AAEjC,QAAI,CAAC,GAAG,WAAW,QAAQ,GAAG;AAC5B,YAAM,IAAI,MAAM,oBAAoB;AAAA,IACtC;AAEA,WAAO;AAAA,EACT;AACF,CAAC;AAMM,IAAM,YAAY,WAAW,cAAc;AAAA,EAChD,MAAM,KAAK,UAAU;AACnB,UAAM,OAAO,GAAG,SAAS,QAAQ;AAEjC,QAAI,KAAK,YAAY,GAAG;AACtB,aAAO;AAAA,IACT;AAEA,WAAO,KAAK,QAAQ,QAAQ;AAAA,EAC9B;AAAA,EACA,aAAa;AAAA,EACb,aAAa;AACf,CAAC;AAKM,IAAM,OAAO,WAAW,cAAc;AAAA,EAC3C,MAAM,KAAK,UAAU;AACnB,UAAM,OAAO,GAAG,SAAS,QAAQ;AAEjC,QAAI,KAAK,OAAO,GAAG;AACjB,aAAO;AAAA,IACT;AAEA,UAAM,IAAI,MAAM,6BAA6B;AAAA,EAC/C;AAAA,EACA,aAAa;AAAA,EACb,aAAa;AACf,CAAC;",
  "names": []
}
