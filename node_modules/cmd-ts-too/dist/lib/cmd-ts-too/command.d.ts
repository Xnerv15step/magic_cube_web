import type { ArgParser, ParsingInto } from "./argparser";
import type { Aliased, Descriptive, Named, PrintHelp, ProvidesHelp, Versioned } from "./helpdoc";
import type { Runner } from "./runner";
type ArgTypes = Record<string, ArgParser<any> & Partial<ProvidesHelp>>;
type HandlerFunc<Args extends ArgTypes> = (args: Output<Args>) => any;
type CommandConfig<Arguments extends ArgTypes, Handler extends HandlerFunc<Arguments>> = {
    args: Arguments;
    version?: string;
    name: string;
    description?: string;
    handler: Handler;
    aliases?: string[];
    noArgsErrorBehaviour?: "show-help" | "show-error";
};
type Output<Args extends ArgTypes> = {
    [key in keyof Args]: ParsingInto<Args[key]>;
};
/**
 * A command line utility.
 *
 * A combination of multiple flags, options and arguments
 * with a common name and a handler that expects them as input.
 */
export declare function command<Arguments extends ArgTypes, Handler extends HandlerFunc<Arguments>>(config: CommandConfig<Arguments, Handler>): ArgParser<Output<Arguments>> & PrintHelp & ProvidesHelp & Named & Runner<Output<Arguments>, ReturnType<Handler>> & Partial<Versioned & Descriptive & Aliased>;
export {};
