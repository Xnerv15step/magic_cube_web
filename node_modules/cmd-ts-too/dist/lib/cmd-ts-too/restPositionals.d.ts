import type { ArgParser } from "./argparser";
import type { OutputOf } from "./from";
import type { Descriptive, Displayed, ProvidesHelp } from "./helpdoc";
import type { HasType, Type } from "./type";
type StringType = Type<string, string>;
type RestPositionalsParser<Decoder extends Type<string, any>> = ArgParser<OutputOf<Decoder>[]> & ProvidesHelp;
/**
 * Read all the positionals and decode them using the type provided.
 * Works best when it is the last item on the `command` construct, to be
 * used like the `...rest` operator in JS and TypeScript.
 *
 * @param config rest positionals argument config
 */
export declare function restPositionals<Decoder extends Type<string, any>>(config: HasType<Decoder> & Partial<Displayed & Descriptive>): RestPositionalsParser<Decoder>;
export declare function restPositionals(config?: Partial<HasType<never> & Displayed & Descriptive>): RestPositionalsParser<StringType>;
export {};
