{
  "version": 3,
  "sources": ["../../src/bin/scramble.ts"],
  "sourcesContent": ["// To run this file directly:\n// bun run src/bin/scramble.ts -- 333\n\n// TODO: completions for `bash`, `zsh`, and `fish`: https://github.com/loilo/completarr\n\n// Important! We import this instead of inlining, because `esbuild` preserves import order semantics but hoists imports above any code inlined here.\n\nimport type { Alg } from \"cubing/alg\";\nimport { eventInfo } from \"cubing/puzzles\";\nimport { randomScrambleForEvent } from \"cubing/scramble\";\nimport { setSearchDebug } from \"cubing/search\";\nimport \"./guards/cmd-ts-too-guard\";\n\nconst {\n  binary,\n  number: cmdNumber,\n  string: cmdString,\n  command,\n  flag,\n  oneOf,\n  option,\n  optional,\n  positional,\n  run,\n} = await import(\"cmd-ts-too\");\n\n// TODO: file an issue about printing these values.\nconst outputFormats = [\"text\", \"link\", \"json-text\"] as const;\nconst notationTypes = [\"auto\", \"LGN\"] as const;\n\nconst app = command({\n  name: \"scramble\",\n  args: {\n    amount: option({\n      description: \"Amount of scrambles\",\n      type: cmdNumber,\n      long: \"amount\",\n      short: \"n\",\n      defaultValue: () => 1,\n      defaultValueIsSerializable: true,\n    }),\n    format: option({\n      description: `Output format. One of: ${outputFormats.join(\", \")}`,\n      type: optional(oneOf(outputFormats)),\n      long: \"format\",\n      short: \"f\",\n    }),\n    notation: option({\n      description: `Notation type. One of: ${notationTypes.join(\", \")}`,\n      type: optional(oneOf([\"auto\", \"LGN\"])),\n      long: \"notation\",\n    }),\n    text: flag({\n      description: \"Convenient shorthand for `--format text`.\",\n      long: \"t\", // TODO: https://github.com/lgarron/cmd-ts-too/issues/6\n      short: \"t\",\n    }),\n    eventID: positional({\n      type: cmdString,\n      displayName: \"WCA or unofficial event ID\",\n    }),\n  },\n  handler: async ({ amount, format: argsFormat, notation, text, eventID }) => {\n    const format =\n      argsFormat ?? (text || !process.stdout.isTTY ? \"text\" : \"auto\");\n\n    setSearchDebug({ logPerf: false, showWorkerInstantiationWarnings: false });\n\n    function scrambleText(scramble: Alg): string {\n      return scramble.toString({\n        // TODO: any\n        notation: notation as (typeof notationTypes)[number], // TODO: handle type conversion at arg parse time.\n      });\n    }\n\n    function scrambleLink(scramble: Alg): string {\n      const url = new URL(\"https://alpha.twizzle.net/edit/\");\n      const puzzleID = eventInfo(eventID)?.puzzleID;\n      puzzleID && url.searchParams.set(\"puzzle\", puzzleID);\n      url.searchParams.set(\"alg\", scrambleText(scramble));\n      return url.toString();\n    }\n\n    class JSONListPrinter<T> {\n      #finished = false;\n      #firstValuePrintedAlready = false;\n      constructor() {\n        process.stdout.write(\"[\\n  \");\n      }\n\n      push(value: T) {\n        if (this.#firstValuePrintedAlready) {\n          process.stdout.write(\",\\n  \");\n        }\n        this.#firstValuePrintedAlready = true;\n        process.stdout.write(JSON.stringify(value));\n      }\n\n      finish() {\n        if (this.#finished) {\n          throw new Error(\"Tried to finish JSON list printing multiple times.\");\n        }\n        this.#finished = true;\n        console.log(\"\\n]\");\n      }\n    }\n\n    if (format !== \"json-text\" && amount === 1) {\n      const scramble = await randomScrambleForEvent(eventID);\n\n      switch (format) {\n        case \"text\": {\n          console.log(scrambleText(scramble));\n          break;\n        }\n        case \"link\": {\n          console.log(scrambleLink(scramble));\n          break;\n        }\n        // @ts-ignore This is a code guard for future refactoring.\n        case \"json-text\": {\n          throw new Error(\n            \"Encountered `json` format in code that is not expected to handle it.\",\n          );\n        }\n        case \"auto\": {\n          console.log(`${scrambleText(scramble)}\n\n\uD83D\uDD17 ${scrambleLink(scramble)}`);\n          break;\n        }\n        default: {\n          throw new Error(\"Unknown format!\");\n        }\n      }\n    } else {\n      const jsonListPrinter: JSONListPrinter<string> | undefined =\n        format === \"json-text\" ? new JSONListPrinter() : undefined;\n      for (let i = 0; i < amount; i++) {\n        // @ts-ignore: Top-level await is okay because this is not part of the main library.\n        const scramble = await randomScrambleForEvent(eventID);\n        switch (format) {\n          case \"text\": {\n            console.log(`// Scramble #${i + 1}`);\n            console.log(`${scrambleText(scramble)}\\n`);\n            break;\n          }\n          case \"link\": {\n            console.log(`// Scramble #${i + 1}`);\n            console.log(`${scrambleLink(scramble)}\\n`);\n            break;\n          }\n          case \"json-text\": {\n            jsonListPrinter?.push(scramble.toString());\n            break;\n          }\n          case \"auto\": {\n            console.log(`// Scramble #${i + 1}\n${scrambleText(scramble)}\n\n\uD83D\uDD17 ${scrambleLink(scramble)}\n`);\n            break;\n          }\n          default: {\n            throw new Error(\"Unknown format!\");\n          }\n        }\n      }\n      jsonListPrinter?.finish();\n    }\n\n    // TODO(https://github.com/cubing/cubing.js/issues/358): this shouldn't be needed.\n    (await import(\"node:process\")).exit(0);\n  },\n});\n\nawait run(binary(app), process.argv);\n"],
  "mappings": "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",
  "names": []
}
