{
  "version": 3,
  "sources": ["../../src/bin/order.ts"],
  "sourcesContent": ["// To run this file directly:\n// bun run src/bin/order.ts -- 3x3x3 \"R U R' U R U2' R'\"\n\nimport type { Type } from \"cmd-ts-too\";\nimport { Alg } from \"cubing/alg\";\nimport { KPuzzle } from \"cubing/kpuzzle\";\nimport { getPuzzleGeometryByName } from \"cubing/puzzle-geometry\";\nimport { puzzles } from \"cubing/puzzles\";\nimport \"./guards/cmd-ts-too-guard\";\n\nconst {\n  binary,\n  string: cmdString,\n  command,\n  positional,\n  run,\n} = await import(\"cmd-ts-too\");\n\n// TODO: dedup with `screenshot` implementation.\nconst ReadAlg: Type<string, Alg> = {\n  async from(str) {\n    return Alg.fromString(str);\n  },\n};\n\nconst app = command({\n  name: \"order\",\n  description: \"Example: order 3x3x3 \\\"R U R' U R U2' R'\\\"\",\n  args: {\n    puzzleGeometryID: positional({\n      type: cmdString,\n      displayName: \"Puzzle geometry ID\",\n    }),\n    alg: positional({\n      type: ReadAlg,\n      displayName: \"Alg\",\n    }),\n  },\n  handler: async ({ puzzleGeometryID, alg }) => {\n    /*\n     *   Turn a name into a geometry.\n     */\n\n    const puzzleLoader = puzzles[puzzleGeometryID];\n    const kpuzzle = await (async () => {\n      if (puzzleLoader) {\n        return await puzzles[puzzleGeometryID].kpuzzle();\n      } else {\n        const pg = getPuzzleGeometryByName(puzzleGeometryID, {\n          allMoves: true,\n        });\n        return new KPuzzle(pg.getKPuzzleDefinition(true));\n      }\n    })();\n    const order = kpuzzle.algToTransformation(alg).repetitionOrder();\n    console.log(order);\n  },\n});\n\nawait run(binary(app), process.argv);\n"],
  "mappings": ";;;;AAIA,SAAS,WAAW;AACpB,SAAS,eAAe;AACxB,SAAS,+BAA+B;AACxC,SAAS,eAAe;AAGxB,IAAM;AAAA,EACJ;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA;AAAA,EACA;AACF,IAAI,MAAM,OAAO,YAAY;AAG7B,IAAM,UAA6B;AAAA,EACjC,MAAM,KAAK,KAAK;AACd,WAAO,IAAI,WAAW,GAAG;AAAA,EAC3B;AACF;AAEA,IAAM,MAAM,QAAQ;AAAA,EAClB,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM;AAAA,IACJ,kBAAkB,WAAW;AAAA,MAC3B,MAAM;AAAA,MACN,aAAa;AAAA,IACf,CAAC;AAAA,IACD,KAAK,WAAW;AAAA,MACd,MAAM;AAAA,MACN,aAAa;AAAA,IACf,CAAC;AAAA,EACH;AAAA,EACA,SAAS,OAAO,EAAE,kBAAkB,IAAI,MAAM;AAK5C,UAAM,eAAe,QAAQ,gBAAgB;AAC7C,UAAM,UAAU,OAAO,YAAY;AACjC,UAAI,cAAc;AAChB,eAAO,MAAM,QAAQ,gBAAgB,EAAE,QAAQ;AAAA,MACjD,OAAO;AACL,cAAM,KAAK,wBAAwB,kBAAkB;AAAA,UACnD,UAAU;AAAA,QACZ,CAAC;AACD,eAAO,IAAI,QAAQ,GAAG,qBAAqB,IAAI,CAAC;AAAA,MAClD;AAAA,IACF,GAAG;AACH,UAAM,QAAQ,QAAQ,oBAAoB,GAAG,EAAE,gBAAgB;AAC/D,YAAQ,IAAI,KAAK;AAAA,EACnB;AACF,CAAC;AAED,MAAM,IAAI,OAAO,GAAG,GAAG,QAAQ,IAAI;",
  "names": []
}
